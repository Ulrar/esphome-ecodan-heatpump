external_components:
  - source: github://tobias-93/esphome-ecodan-heatpump@main
    components: [ ecodan ]

logger:
  baud_rate: 0

api:

ota:

wifi:
# remove leading '#' and fill in your wifi details
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${friendlyName} Fallback Hotspot"

captive_portal:

# Enable Web server.
web_server:
  port: 80

# Sync time with Home Assistant.
time:
  - platform: homeassistant
    id: homeassistant_time

uart:
  id: ecodan_uart
  baud_rate: 2400
  tx_pin: GPIO1
  rx_pin: GPIO3
  rx_buffer_size: 1024
  parity: EVEN

ecodan:
  id: ecodan_instance
  uart_id: ecodan_uart

text_sensor:
  - platform: version
    name: ESPHome Version
  - platform: wifi_info
    ip_address:
      name: IP
    ssid:
      name: SSID
    bssid:
      name: BSSID
  - platform: ecodan
    date_time:
      name: Current date/time
    defrost:
      name: Defrost
    heating_stage:
      name: Heating stage
    operating_mode:
      name: Operating mode
    heat_cool:
      name: Heating/cooling
    hot_water_timer:
      name: Hot water timer
    date_energy_cons:
      name: Date energy consumption
    date_energy_prod:
      name: Date energy production      
    holiday_mode:
      name: Holiday mode

sensor:
  - platform: uptime
    name: Uptime
  - platform: wifi_signal
    name: WiFi Signal
    update_interval: 60s
  - platform: ecodan
    error_code:
      name: Error code
    frequency:
      name: Frequency
    output_power:
      name: Output power
    zone1_room_temperature:
      name: Zone 1 Room temperature
    zone2_room_temperature:
      name: Zone 2 Room temperature
    gas_return_temp_signed:
      name: Gas return temperature
    outside_temperature:
      name: Outside temperature
    water_feed_temp_signed:
      name: Water feed temperature
    water_return_temp_signed:
      name: Water return temperature
    hot_water_temperature:
      name: Hot water temperature
    legionella_temp_setpoint:
      name: Legionella temperature setpoint
    runtime:
      name: Runtime
    water_flow:
      name: Water flow
    energy_cons_yesterday:
      name: Heating energy consumption (yesterday)
      id: energy_cons_yesterday
    energy_prod_yesterday:
      name: Heating energy production (yesterday)
      id: energy_prod_yesterday
    energy_cooling_cons_yesterday:
      name: Cooling energy consumption (yesterday)
    energy_cooling_prod_yesterday:
      name: Cooling energy production (yesterday)
    energy_dhw_cons_yesterday:
      name: Hot water energy consumption (yesterday)
      id: energy_dhw_cons_yesterday
    energy_dhw_prod_yesterday:
      name: Hot water energy production (yesterday)
      id: energy_dhw_prod_yesterday
    energy_consumed_increasing:
      name: Total energy consumed

  # Calculated CoP (yesterday) as ratio of production/consumption
  - platform: template
    name: "CoP (yesterday)"
    id: cop_yesterday
    lambda: |-
      float prod = id(energy_prod_yesterday).state;
      float cons = id(energy_cons_yesterday).state;
      if (!std::isfinite(prod) || !std::isfinite(cons) || cons <= 0.0) {
        return NAN;
      }
      return prod / cons;
    state_class: measurement
    accuracy_decimals: 2

  - platform: template
    name: "DHW CoP (yesterday)"
    id: dhw_cop_yesterday
    lambda: |-
      float prod = id(energy_dhw_prod_yesterday).state;
      float cons = id(energy_dhw_cons_yesterday).state;
      if (!std::isfinite(prod) || !std::isfinite(cons) || cons <= 0.0) {
        return NAN;
      }
      return prod / cons;
    state_class: measurement
    accuracy_decimals: 2

  - platform: template
    name: "Total CoP (yesterday)"
    id: total_cop_yesterday
    lambda: |-
      float prod_heat = id(energy_prod_yesterday).state;
      float prod_dhw  = id(energy_dhw_prod_yesterday).state;
      float cons_heat = id(energy_cons_yesterday).state;
      float cons_dhw  = id(energy_dhw_cons_yesterday).state;
      if (!std::isfinite(prod_heat) || !std::isfinite(prod_dhw) ||
          !std::isfinite(cons_heat) || !std::isfinite(cons_dhw)) {
        return NAN;
      }
      float total_prod = prod_heat + prod_dhw;
      float total_cons = cons_heat + cons_dhw;
      if (total_cons <= 0.0) return NAN;
      return total_prod / total_cons;
    state_class: measurement
    accuracy_decimals: 2

switch:
  - platform: ecodan
    power_state:
      name: Power state
    force_dhw:
      name: Force DHW
    holiday_mode:
      name: Holiday Mode

select:
  - platform: ecodan
    # Legacy single key (maps to zone1). Prefer using zone specific keys below.
    # mode_select:
    #   name: Mode
    mode_select_zone1:
      name: Mode Zone 1
    mode_select_zone2:
      name: Mode Zone 2
    hot_water_mode:
      name: Hot water mode

number:
  - platform: ecodan
    hot_water_setpoint:
      name: Hot water setpoint
    zone1_flow_temp_setpoint:
      name: Zone 1 Flow temperature setpoint
    zone2_flow_temp_setpoint:
      name: Zone 2 Flow temperature setpoint
    # zone1_room_temp_setpoint:
    #   name: Zone 1 Room temperature setpoint
    # zone2_room_temp_setpoint:
    #   name: Zone 2 Room temperature setpoint

# Climate entities for zone temperature control (alternative to number entities above)
climate:
  - platform: ecodan
    zone1:
      name: "Zone 1 Thermostat"
    zone2:
      name: "Zone 2 Thermostat"
